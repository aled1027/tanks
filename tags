!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Bullet	Bullet.h	/^        Bullet(Point _p, Vector _v, Vector _a, float _d, float _h, float _m) : Entity(_p,_v,_a,_d,_h,_m) {}$/;"	f	class:Bullet
Bullet	Bullet.h	/^class Bullet : public Entity {$/;"	c
CXXFLAGS	makefile	/^CXXFLAGS =	-O2 -g -Wall -fmessage-length=0 -std=c++11$/;"	m
Entity	Entity.cpp	/^Entity::Entity (Point _position, Vector _velocity, Vector _acceleration, float _direction, float _health, float _maxHealth) {$/;"	f	class:Entity
Entity	Entity.cpp	/^Entity::Entity() { $/;"	f	class:Entity
Entity	Entity.h	/^class Entity {$/;"	c
FRAMES_PER_SECOND	main.cpp	/^const int FRAMES_PER_SECOND = 50;$/;"	v
LIBS	makefile	/^LIBS = -lSDL -lSDL_image -lSDL_ttf $/;"	m
OBJS	makefile	/^OBJS =	sdl_utils.o Bullet.o Tank.o Entity.o utils\/point_vector.o main.o$/;"	m
SCREEN_BPP	main.cpp	/^const int SCREEN_BPP = 32; \/\/bits per pixel$/;"	v
SCREEN_HEIGHT	main.cpp	/^const int SCREEN_HEIGHT = 400;$/;"	v
SCREEN_WIDTH	main.cpp	/^const int SCREEN_WIDTH = 600;$/;"	v
SOURCES	makefile	/^SOURCES = sdl_utils.cpp Bullet.cpp Tank.cpp Entity.cpp utils\/point_vector.cpp$/;"	m
TARGET	makefile	/^TARGET =		main$/;"	m
TEST_LIBS	makefile	/^TEST_LIBS = -lboost_unit_test_framework$/;"	m
TEST_TARGET	makefile	/^TEST_TARGET = tests\/test.cpp$/;"	m
Tank	Tank.h	/^        Tank(Point _p, Vector _v, Vector _a, float _d, float _h, float _m) : Entity(_p,_v,_a,_d,_h,_m) {}$/;"	f	class:Tank
Tank	Tank.h	/^class Tank : public Entity {$/;"	c
acceleration	Entity.h	/^        Vector acceleration;$/;"	m	class:Entity
box	Entity.h	/^        SDL_Rect box;$/;"	m	class:Entity
checkAndFixXPosition	Entity.cpp	/^void Entity::checkAndFixXPosition() {$/;"	f	class:Entity
checkAndFixYPosition	Entity.cpp	/^void Entity::checkAndFixYPosition() {$/;"	f	class:Entity
clean_up	main.cpp	/^void clean_up() {$/;"	f
damage	Bullet.h	/^        int damage;$/;"	m	class:Bullet
die	Entity.cpp	/^void Entity::die() {$/;"	f	class:Entity
direction	Entity.h	/^        float direction; \/\/ an angle from x-axies ie between 0 2pi$/;"	m	class:Entity
dot	Entity.h	/^        SDL_Surface *dot;$/;"	m	class:Entity
event	main.cpp	/^SDL_Event event;$/;"	v
fire	Tank.cpp	/^Bullet Tank::fire() {$/;"	f	class:Tank
fireRate	Tank.h	/^        float fireRate;$/;"	m	class:Tank
getAcceleration	Entity.cpp	/^Vector Entity::getAcceleration() const {$/;"	f	class:Entity
getDamage	Bullet.cpp	/^int Bullet::getDamage() {$/;"	f	class:Bullet
getDirection	Entity.cpp	/^float Entity::getDirection() const {$/;"	f	class:Entity
getHealth	Entity.cpp	/^float Entity::getHealth() const {$/;"	f	class:Entity
getHit	Entity.cpp	/^void Entity::getHit(Bullet b) {$/;"	f	class:Entity
getMaxHealth	Entity.cpp	/^float Entity::getMaxHealth() const {$/;"	f	class:Entity
getPosition	Entity.cpp	/^Point Entity::getPosition() const {$/;"	f	class:Entity
getVelocity	Entity.cpp	/^Vector Entity::getVelocity() const {$/;"	f	class:Entity
handle_input	Entity.cpp	/^void Entity::handle_input() {$/;"	f	class:Entity
health	Entity.h	/^        float health;$/;"	m	class:Entity
height	Entity.h	/^        int height;$/;"	m	class:Entity
init	main.cpp	/^bool init() {$/;"	f
main	main.cpp	/^int main() {$/;"	f
maxHealth	Entity.h	/^        float maxHealth;$/;"	m	class:Entity
move	Entity.cpp	/^void Entity::move() {$/;"	f	class:Entity
moveBy	Entity.cpp	/^void Entity::moveBy(Vector v) {$/;"	f	class:Entity
moveTo	Entity.cpp	/^void Entity::moveTo(Point p) {$/;"	f	class:Entity
outstandingBullets	Tank.h	/^        std::vector<Bullet> outstandingBullets;$/;"	m	class:Tank
position	Entity.h	/^        Point position;$/;"	m	class:Entity
printPosition	Entity.cpp	/^void Entity::printPosition() {$/;"	f	class:Entity
screen	main.cpp	/^SDL_Surface *screen = NULL;$/;"	v
setDamage	Bullet.cpp	/^void Bullet::setDamage(int d) {$/;"	f	class:Bullet
setVelocity	Entity.cpp	/^void Entity::setVelocity(Vector v) {$/;"	f	class:Entity
show	Entity.cpp	/^void Entity::show() {$/;"	f	class:Entity
showDot	Entity.cpp	/^void Entity::showDot() {$/;"	f	class:Entity
velocity	Entity.h	/^        Vector velocity; \/\/ includes direction $/;"	m	class:Entity
width	Entity.h	/^        int width; \/\/ width and height of image$/;"	m	class:Entity
~Entity	Entity.cpp	/^Entity::~Entity() {$/;"	f	class:Entity
